openapi: '3.0.2'
info:
  title: XTC Eaticket Django Server API
  version: '1.0'
  description: >-
    This is the documentation for the Eaticket(electronic food-ticket) Django server API used by the Flutter frontend to communicate with the backend server.   
    This can be used to authenticate users, payments and manage eatickets.
    \

    \
    
    Naming Conventions:

    - userid: 20201171

    - username: Sota Kobayashi

    - ticket_type: type of food

    - ticket_id: time based-uuid

    - ticket_hash: hashed string of (userid + ticket_type + ticket_id). A unique password will be added to the string before hashing, to enforce encryption.

    - user: user object will all related information(except sensitive information like password)

  contact:
    name: Xiaolin's Techclub
    url: https://xiaolinstechclub.com/eaticket
    email: xiaolinstechclub@gmail.com
servers:
  - url: https://mis.xiaolinstechclub.com/eaticket/api/v1
    description: Production server
  # - url: http://127.0.0.1:80/api/v1
  #   description: Local docker server
  # - url: http://127.0.0.1:5000/api/v1
  #   description: Local flask server
tags:
  - name: User
    description: User related endpoints
  - name: Eaticket
    description: Ticket related endpoints
  - name: Validation
    description: Eaticket validation related endpoints
  - name: Payment
    description: Payment related endpoints
  - name: Kitchen
    description: Kitchen app related endpoints
  - name: Data
    description: Data related endpoints
paths:
  /user/id/{userid}:
    get:
      tags:
        - User
      summary: Management - Get user by userid
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found or server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/limit/{limit}:
    get:
      tags:
        - User
      summary: Management - Get the first n users in the database
      description: データベースの最初のN人の情報を取得する。ユーザーが正常に登録されているかを確認するために使う。
      parameters:
        - name: limit
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '404':
          description: server error - could not access user info in database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/total_number:
    get:
      tags:
        - User
      summary: Management - Get total number of users in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '404':
          description: server error - could not acquire total number of users in database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/login/userid:
    post:
      tags:
        - User
      summary: App - login for students using userid(like 20201171) and password_hash
      description: 最初にログインする際に使用するロジック。生徒はuseridとパスワードハッシュを使用してログインするが、
        教員等はuseridを持たないため、username(ローマ字フルネーム)とパスワードハッシュでログインしてもらうことになる
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userid:
                  type: string
                  description: userid(like 20201171) of the student
                password_hash:
                  type: string
                  description: hashed password of the user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username: 
                    type: string
                    description: username(like Sota Kobayashi) of the user
                  is_authenticated:
                    type: boolean
                    description: result of the login authentication(true or false)
        '401':
          description: Authentication Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: username(like Sota Kobayashi) of the user
                  is_authenticated: 
                    type: boolean
                    description: result of the login authentication(true or false)
        '404':
          description: server error - could not authenticate user due to sever error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/login/username:
    post:
      tags:
        - User
      summary: App - login for non-students(teachers and staffs) using username(first_name + last_name:) and password_hash
      description: 最初にログインする際に使用するロジック。生徒はuseridとパスワードハッシュを使用してログインするが、
        教員等はuseridを持たないため、username(ローマ字フルネーム)とパスワードハッシュでログインしてもらうことになる。
        尚、教員のuseridはサーバー側で適当に00から始まるuseridを割り振る
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password_hash
              properties:
                username:
                  type: string
                  description: username(like Sota Kobayashi) of the user
                password_hash:
                  type: string
                  description: hashed password of the user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username: 
                    type: string
                    description: username(like Sota Kobayashi) of the user
                  is_authenticated:
                    type: boolean
                    description: result of the login authentication(true or false)
        '401':
          description: Authentication Failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: username(like Sota Kobayashi) of the user
                  is_authenticated: 
                    type: boolean
                    description: result of the login authentication(true or false)
        '404':
          description: server error - could not authenticate user due to sever error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/login/reset_password/{userid}:
    post:
      tags:
        - User
      summary: App - Reset user password
      description: Tokenを持ったパスワードリセットメールを送信する。
        その後ユーザーがセットした新しいパスワードをハッシュ化して保存する。
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Password reset link sent successfully
        '404':
          description: User not found or server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/signup/:
    post:
      tags:
        - User
      summary: App - Create new user account
      description: Create a new user account with the provided credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstname
                - lastname
                - password_hash
                - email
              properties:
                firstname:
                  type: string
                  description: First name of the user
                lastname:
                  type: string
                  description: Last name of the user
                password_hash:
                  type: string
                  description: Hashed password of the user
                email:
                  type: string
                  format: email
                  description: Email address of the user
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /payment/new/{userid}:
    post:
      tags:
        - Payment
      summary: App - Start new payment for user
      description: PayPayの決済処理を始めるためのエンドポイント
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ticket_type
                - amount
              properties:
                ticket_type:
                  type: string
                  description: Type of ticket to purchase
                amount:
                  type: integer
                  description: Number of eaticket ordered
      responses:
        '201':
          description: Payment process activated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '400':
          description: Invalid payment request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error during payment processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /payment/history/{userid}:
    get:
      tags:
        - Payment
      summary: App - Get payment history for user
      description: ユーザーの決済履歴を取得する
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved payment history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentHistory'
        '404':
          description: User not found or no payment history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /eaticket/id/{userid}:
    get:
      tags:
        - Eaticket
      summary: App/Management - get all user eatickets a user has based on their userid
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserEaticket'
        '404':
          description: Eaticket object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Eaticket
      summary: Development - Delete all user eatickets by user id(disabled in production)
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserEaticket'
        '404':
          description: Eaticket object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/hash/{ticket_hash}:
    get:
      tags:
        - Eaticket
      summary: App/Management - Get user UserEaticket object by ticket hash
      parameters:
        - name: ticket_hash
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '404':
          description: Eaticket object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Eaticket
      summary: Management - Delete user eaticket by ticket hash
      parameters:
        - name: ticket_hash
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '404':
          description: Eaticket object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/limit/{limit}:
    get:
      tags:
        - Eaticket
      summary: Management - Get the first n user eatickets in the database
      description: データベースの最初のN枚の食券情報を取得する。食券のDBへの登録が正常に登録されているかを確認するために使う。
      parameters:
        - name: limit
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserEaticket'
        '404':
          description: Eaticket object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/total_number:
    get:
      tags:
        - Eaticket
      summary: Management - Get total number of user eatickets in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '500':
          description: Server internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/{userid}/{ticket_type}:
    post:
      tags:
        - Eaticket
      summary: Management(Not App!!!) - Create user eaticket by user id and ticket_type(will be logged in server!)
      description: 注意！こちらはアプリから呼ばれるAPIではなく、トラブル対応等の際に使用する、強制的に食券を発行するAPIです。
        PayPayの決済処理を飛ばして食券を発行するため、アプリからは絶対に呼ばないでください。
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
        - name: ticket_type
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Eaticket successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '400':
          description: Failed to create eaticket due to internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/all/{force}:
    delete:
      tags:
        - Eaticket
      summary: Development - Delete all user eatickets(disabled in production)
      parameters:
        - name: force
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: All user eatickets deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '500':
          description: Eaticket could not be deleted due to internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/validate/{ticket_hash}:
    get:
      tags:
        - Validation
      summary: App - Validate eaticket, checking whether eaticket has been used or not
      description: 食券が使用済みかどうかの認証
      parameters:
        - name: ticket_hash
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Valid eaticket
          content:
            application/json:
              schema:
                type: string
                description: return message
        '400':
          description: Invalid eaticket 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: server internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kitchen/current_orders:
    get:
      tags:
        - Kitchen
      summary: Kitchen - Get all current orders
      description: Get all orders that need to be prepared
      responses:
        '200':
          description: Successfully retrieved orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        '404':
          description: No orders found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error retrieving orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /kitchen/AI/predicted_orders:
    get:
      tags:
        - Kitchen
      summary: Kitchen - Predict orders using AI(experimental features)
      description: 機械学習したAIを元にその日の各メニューの売り上げを予測する
      responses:
        '200':
          description: Prediction successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        '500':
          description: Server error predicting orders using model
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /data/export_backup:
    get:
      tags:
      - Data
      summary: Management - Export backup into csv file
      description: データべースの全データをCSV形式のファイルにバックアップとして保存する
      responses:
        '200':
          description: Successfully exported database to local storage
        '500':
          description: Error exporting database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /data/summarize_day_report:
    get:
      tags:
      - Data
      summary: Mangament - Export day summary into csv file and send write to spreadsheet
      description: その日の分の売り上げをまとめた売上レポートを出力し、Google APIを通じて指定されたスプレッドシートに記載する
      responses:
        '200':
          description: Successfully exported and written day report to spreadsheet
        '500':
          description: Error exporting database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    UserEaticket:
      type: object
      properties:
        userid:
          type: string
          format: uuid
          description: user id of the user
        ticket_id:
          type: integer
          format: uuid
          description: ticket id of the user
        ticket_type:
          type: string
          description: type of eaticket
        ticket_hash:
          type: string
          description: hash of the eaticket
        created_at:
          type: string
          format: date-time
        is_used:
          type: boolean
          description: whether already used or not
        used_at:
          type: string
          format: date-time
          description: if applicable, when the eaticket was used
    ValidUserEatickets:
      type: object
      properties:
        ticket_type:
          type: string
          description: type of eaticket
        ticket_hash:
          type: string
          description: hash of the eaticket
        created_at:
          type: string
          format: date-time
    PaymentHistory:
      type: array
      items:
        type: object
        properties:
          paid_at:
            type: string
            format: date-time
            description: When the payment was made
          ticket_type:
            type: string
            description: Type of ticket purchased
          ticket_hash:
            type: string
            description: Hash of the purchased ticket
          is_used:
            type: boolean
            description: Whether the ticket has been used
          used_at:
            type: string
            format: date-time
            description: When the ticket was used, if applicable
    User:
      type: object
      properties:
        userid:
          type: string
          description: userid(like S2E12) of the user
        username:
          type: string
          description: name of the user
        first_name:
          type: string
          description: first name of the user
        last_name:
          type: string
          description: last name of the user
        email:
            type: string
            description: email address of the user, must be in school's email address
        eatickets:
          type: array
          items:
            type: object            
            properties:
              ticket_hash: 
                type: string
                description: only show the ticket_hash of the eaticket here for clarity
    Users:
      type: object
      properties:
        code:
          type: integer
        msg:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Orders:
      type: object
      properties:
        total_order:
          type: integer
          description: Current total number of kitcehn orders
        wa_men:
          type: integer
          description: Number of Japanese noodle orders
        chuka_men:
          type: integer
          description: Number of Chinese noodle orders
        lunch:
          type: integer
          description: Number of lunch set orders
        torikara:
          type: integer
          description: Number of fried chicken orders
        don_rice:
          type: integer
          description: Number of rice bowl orders
        curry:
          type: integer
          description: Number of curry orders
        TO_lunch:
          type: integer
          description: Number of takeout lunch set orders
        TO_torikara:
          type: integer
          description: Number of takeout fried chicken orders
        TO_don_rice:
          type: integer
          description: Number of takeout rice bowl orders
        TO_curry:
          type: integer
          description: Number of takeout curry orders

    Error:
      type: object
      properties:
        code:
          type: integer
          example: 404
        result:
          type: string
          example: null
        msg:
          type: string
          example: User not found
