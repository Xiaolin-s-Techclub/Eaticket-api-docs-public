openapi: '3.0.2'
info:
  title: XTC Eaticket Django Server API
  version: '1.0'
  description: >-
    This is the documentation for the Eaticket(electronic food-ticket) Django server API used by the Flutter frontend to communicate with the backend server.   
    This can be used to authenticate users, payments and manage eatickets.
    \

    \
    
    Naming Conventions:

    - userid: S2E12

    - username: Sota Kobayashi

    - ticket_hash: hashed string of userid + ticket_no

    - user: user object will all related information(except sensitive information)

  contact:
    name: Xiaolin's Techclub
    url: https://xiaolinstechclub.com/eaticket
    email: xiaolinstechclub@gmail.com
servers:
  - url: https://mis.xiaolinstechclub.com/api/v1
    description: Production server
  # - url: http://127.0.0.1:80/api/v1
  #   description: Local docker server
  # - url: http://127.0.0.1:5000/api/v1
  #   description: Local flask server
tags:
  - name: User
    description: User related endpoints
  - name: Eaticket
    description: Ticket related endpoints
  - name: Validation
    description: Eaticket validation related endpoints
  - name: Data
    description: Data related endpoints
paths:
  /user/id/{userid}:
    get:
      tags:
        - User
      summary: Get user by userid
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found or server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/limit/{limit}:
    get:
      tags:
        - User
      summary: Get the first n users in the database
      parameters:
        - name: limit
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Users'
        '404':
          description: server error - could not access user info in database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/all/total_number:
    get:
      tags:
        - User
      summary: Get total number of users in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: integer
        '404':
          description: server error - could not acquire total number of users in database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/id/{userid}/{ticket_id}:
    get:
      tags:
        - Eaticket
      summary: Get user eaticket by user id and ticket id
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
        - name: ticket_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '404':
          description: Eaticket object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Eaticket
      summary: Delete user eaticket by user id and ticket id
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
        - name: ticket_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '404':
          description: Eaticket object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/hash/{ticket_hash}:
    get:
      tags:
        - Eaticket
      summary: Get user eaticket by ticket hash
      parameters:
        - name: ticket_hash
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '404':
          description: Eaticket object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/limit/{limit}:
    get:
      tags:
        - Eaticket
      summary: Get the first n user eatickets in the database
      parameters:
        - name: limit
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserEaticket'
        '404':
          description: Eaticket object not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/all/total_number:
    get:
      tags:
        - Eaticket
      summary: Get total number of user eatickets in the database
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '500':
          description: Server internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/{userid}/{invited_name}:
    post:
      tags:
        - Eaticket
      summary: Create user eaticket by user id and ticket_type(will be logged in server!)
      parameters:
        - name: userid
          in: path
          required: true
          schema:
            type: string
        - name: ticket_type
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Eaticket successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '400':
          description: Failed to create eaticket due to internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/all/{force}:
    delete:
      tags:
        - Eaticket
      summary: Delete all user eatickets(disabled in production)
      parameters:
        - name: force
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: All user eatickets deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEaticket'
        '500':
          description: Eaticket could not be deleted due to internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eaticket/validate/{ticket_hash}:
    get:
      tags:
        - Validation
      summary: Validate eaticket
      parameters:
        - name: ticket_hash
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Valid eaticket
          content:
            application/json:
              schema:
                type: string
                description: return message
        '400':
          description: Invalid eaticket 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: server internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /data/export_backup:
    get:
      tags:
      - Data
      summary: Export backup into sqlite db(will change into csv format in the future)
      responses:
        '200':
          description: Successfully exported database to local storage
        '500':
          description: Error exporting database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /data/summarize_day_report:
    get:
      tags:
      - Data
      summary: Export day summary into csv file and send write to spreadsheet
      responses:
        '200':
          description: Successfully exported and written day report to spreadsheet
        '500':
          description: Error exporting database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    UserEaticket:
      type: object
      properties:
        userid:
          type: string
          format: uuid
          description: user id of the user
        ticket_id:
          type: integer
          format: uuid
          description: ticket id of the user
        ticket_type:
          type: string
          description: type of eaticket
        ticket_hash:
          type: string
          description: hash of the eaticket
        created_at:
          type: string
          format: date-time
        is_used:
          type: boolean
          description: whether already used or not
        used_at:
          type: string
          format: date-time
          description: if applicable, when the eaticket was used
    User:
      type: object
      properties:
        userid:
          type: string
          description: userid(like S2E12) of the user
        username:
          type: string
          description: name of the user
        first_name:
          type: string
          description: first name of the user
        last_name:
          type: string
          description: last name of the user
        student_uuid:
          type: integer
          description: student number(int) of the user
        email:
            type: string
            description: email address of the user, must be in school's email address
        eatickets:
          type: object
          properties:
            ticket-1:
              type: string
              description: type of food ticket(like TO curry)
            ticket-2:
              type: string
              description: type of food ticket(like TO karaage)
            ticket-3:
              type: string
              description: if applicable...
    Users:
      type: object
      properties:
        code:
          type: integer
        msg:
          type: string
        result:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Error:
      type: object
      properties:
        code:
          type: integer
          example: 404
        result:
          type: string
          example: null
        msg:
          type: string
          example: User not found
